/**
 * Code Written by: Emanuel Ruiz
 */
package com.example.controller;
import com.example.entity.*;
import com.example.exception.AccountNotFoundException;
import com.example.exception.ResourceConflictException;
import com.example.exception.ResourceNotFoundException;
import com.example.service.AccountService;
import com.example.service.MessageService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

import javax.naming.AuthenticationException;

/**
 * Front Controller that maps Rest endpoints and uses Service classes to implement CRUD actions in the Account and Message Database entities. 
 */

@Controller
public class SocialMediaController {
    private final AccountService accountService;
    private final MessageService messageService;

    /**
     * Constructor with Dependency Injection
     * @param aService
     * @param mService
     */
    @Autowired
    public SocialMediaController(AccountService aService, MessageService mService){
        this.accountService = aService;
        this.messageService = mService;
    }

    /**
     * Using Spring Boot Annotation we map a post endpoint to register new accounts.
     * @param newAccount new account to register and add to the database
     * @return newAccount with account_id value generated by the database
     */
    @PostMapping("/register")
    public @ResponseBody ResponseEntity<Account> register(@RequestBody Account newAccount){
        return ResponseEntity.status(200).body(accountService.registerAccount(newAccount));
    }

    /**
     * Using Spring Boot Post Annotation we map the endpoint to login to an account in the database.
     * @param newAccount : account with username and password filled to authenticate account
     * @return ResponseEntity with account information.
     */
    @PostMapping("/login")
    public @ResponseBody ResponseEntity<?> login(@RequestBody Account newAccount){

        try {
            return ResponseEntity.status(200).body(accountService.login(newAccount));
        } catch (AuthenticationException e) {
            return ResponseEntity.status(401).body(e.getMessage());
        } 
        
    }

    /**
     * Using Spring Boot Post Annotation we map an endpoint to create a new message from a valid account holder
     * @param newMessage: message with message_text and posted_by properties required 
     * @return: message with all properties filled
     */
    @PostMapping("/messages")
    public @ResponseBody ResponseEntity<Message> createMessage(@RequestBody Message newMessage){
        return ResponseEntity.status(200).body(messageService.createMessage(newMessage));
    }

    /**
     * Endpoint Mapping that handles the retrieval of all messages in the database
     * @return List<Message>
     */
    @GetMapping("/messages")
    public @ResponseBody List<Message> getMessages(){
        List<Message> messages = new ArrayList<>();
        messages = messageService.getAllMessages();
        return messages;
    }

    /**
     * Endpoint Mappning that handles the retrieval of a specified message according to the messageId
     * Using the messageService. 
     * @param messageID
     * @return: Response entity with message object
     */
    @GetMapping("/messages/{messageID}")
    public @ResponseBody ResponseEntity<Message> getMessageByID(@PathVariable int messageID){
        return ResponseEntity.status(200).body(messageService.getMessageById(messageID));
    }

    /**
     * Endpoint Maps the deletion of a message according to messageId.
     * @param messageID message to delete
     * @return Response entity with integer of number of rows affected
     */
    @DeleteMapping("messages/{messageID}")
    public @ResponseBody ResponseEntity<Integer> deleteMessage(@PathVariable int messageID){
        return ResponseEntity.status(200).body(messageService.deleteMessageById(messageID));
    }

    /**
     * Patch handler that updates message in the database
     * @param messageID message to update 
     * @param message: message Object with messageText required
     * @return number of entries updated
     */
    @PatchMapping("messages/{messageID}")
    public @ResponseBody ResponseEntity<Integer> updatMessage(@PathVariable int messageID,@RequestBody Message message){
        return ResponseEntity.status(200).body(messageService.updateMessageById(messageID, message.getMessageText()));
    }

    /**
     * Get handler that retrieves all messages from specified account.
     * @param accountId 
     * @return List<Message> with all messages with posted_by accountId
     */
    @GetMapping("/accounts/{accountId}/messages")
    public @ResponseBody ResponseEntity<List<Message>> getMessagesByAccount(@PathVariable int accountId)
    {
        return ResponseEntity.status(200).body(messageService.getMessagesByUser(accountId));
    }

    /**
     * Custom RunTime exception handler used to denote when object already exists in the database
     * @param ex
     * @return ResponseEntity
     */
    @ExceptionHandler(ResourceConflictException.class)
    public ResponseEntity<String> resourceConflictExceptionHandler(ResourceConflictException ex){
        return ResponseEntity.status(409).body(ex.getMessage());
    }

    /**
     * Custom RuntimeException handler when a resource is not found
     * @param ex
     * @return
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<String> resourceNotFoundExceptionHandler(ResourceNotFoundException ex){
        return ResponseEntity.status(400).body(ex.getMessage());
    }

    /**
     * Authentication exception handler for failed login
     * @param ex
     * @return
     */
    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<String> authenticationExceptionHandler(AuthenticationException ex){
        return ResponseEntity.status(401).body(ex.getMessage());
    }

    /**
     * Runtime exception handler for argument errors
     * @param ex
     * @return
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> illegalArgumentExceptionHandler(IllegalArgumentException ex){
        return ResponseEntity.status(400).body(ex.getMessage());
    }

    /**
     * Custom Runtime Exception handler for accounts not found. 
     * @param ex
     * @return
     */
    @ExceptionHandler(AccountNotFoundException.class)
    public ResponseEntity<String> accountNotFoundExceptionHandler(AccountNotFoundException ex){
        return ResponseEntity.status(401).body(ex.getMessage());
    }

}
